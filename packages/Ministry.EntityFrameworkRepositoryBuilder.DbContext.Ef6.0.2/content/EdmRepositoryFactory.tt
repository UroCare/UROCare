<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#
string inputFile = "ENTER_EDMX_NAME_HERE.edmx";
string idFieldName = "Id";
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataTools ef = new MetadataTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this);

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);

EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
if (container == null)
{
    return "// No EntityContainer exists in the model, so no code was generated";
}

string namespaceName = code.VsNamespaceSuggestion();
string appName = container.Name.Replace("Entities", String.Empty);
string contextWrapperName = appName + "ContextWrapper";
string contextWrapperInterfaceName = "I" + contextWrapperName;
var entitySets = container.BaseEntitySets.OfType<EntitySet>();
var entities = ItemCollection.GetItems<EntityType>();
var entitiesWithoutSets = new List<EntityType>();

foreach(var entity in entities)
{
	var found = false;
	foreach (var entitySet in entitySets)
    {
		if (entity.Name == entitySet.ElementType.Name)
			found = true;
    }

	if (!found)
		entitiesWithoutSets.Add(entity);
}


EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
#>
<#WriteAutogeneratedCodeNotice();#>
using <#=code.EscapeNamespace(namespaceName)#>.Abstract;
using <#=code.EscapeNamespace(namespaceName)#>.Repositories;

namespace <#=code.EscapeNamespace(namespaceName)#>
{
	/// <summary>
	/// Provides Repository Implementations
	/// </summary>
	public class EdmRepositoryFactory : RepositoryFactoryBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="EdmRepositoryFactory"/> class.
		/// </summary>
		public EdmRepositoryFactory()
		{
		    Context = new <#=code.Escape(contextWrapperName)#>();
		    BindRepositories(Context);
		}

		/// <summary>
		/// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
		/// </summary>
		public override void Dispose()
		{
		    base.Dispose();
		    Context.Dispose();
		}
	}
}
<#
fileManager.StartNewFile("IRepositoryFactory.cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using System;

namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
    /// <summary>
    /// Provides Repository Implementations
    /// </summary>
    public interface IRepositoryFactory : IDisposable
    {	

<#		
    foreach (EntityType entity in ItemCollection.GetItems<EntityType>())
    {
#>
        I<#=PluraliseEntity(entity)#>Repository <#=PluraliseEntity(entity)#> { get; }		
<#
    }
#>

        /// <summary>
        /// Saves the current state of the entities.
        /// </summary>
        void Save();

        /// <summary>
        /// Accepts all changes made to the underlying context.
        /// </summary>
        void AcceptAllChanges();

		/// <summary>
        /// Dumps and refreshes the underlying context, abandoning any outstanding changes.
        /// </summary>
        void Refresh();
    }
}
<#
fileManager.StartNewFile("RepositoryFactoryBase.cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using <#=code.EscapeNamespace(namespaceName)#>.Repositories;

namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
    /// <summary>
    /// Provides Repository Implementations
    /// </summary>
    public abstract class RepositoryFactoryBase : IRepositoryFactory
    {
		#region | Repositories |

<#		
    foreach (EntityType entity in ItemCollection.GetItems<EntityType>())
    {
#>
		/// <summary>
        /// Gets the <#=code.Escape(entity.Name)#> repository implementation.
        /// </summary>
        public I<#=PluraliseEntity(entity)#>Repository <#=PluraliseEntity(entity)#> { get; protected set; }		
<#
    }
#>
		#endregion

        /// <summary>
        /// Gets or sets the context.
        /// </summary>
        protected <#=code.Escape(contextWrapperInterfaceName)#> Context { get; set; }

        /// <summary>
        /// Binds the repositories.
        /// </summary>
        /// <param name="contextWrapper">The context wrapper.</param>
        protected void BindRepositories(<#=code.Escape(contextWrapperInterfaceName)#> contextWrapper)
        {
            Context = contextWrapper;
			
<#		
    foreach (EntityType entity in ItemCollection.GetItems<EntityType>())
    {
#>
        	<#=PluraliseEntity(entity)#> = new <#=PluraliseEntity(entity)#>Repository(Context);		
<#
    }
#>
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public virtual void Dispose()
        {		
<#		
    foreach (EntityType entity in ItemCollection.GetItems<EntityType>())
    {
#>
        	if (<#=PluraliseEntity(entity)#> != null) <#=PluraliseEntity(entity)#>.Dispose();		
<#
    }
#>
        }

        /// <summary>
        /// Saves the current context state to the database.
        /// </summary>
        public void Save()
        {
            Context.SaveChanges();
        }

        /// <summary>
        /// Accepts all changes made to the underlying context.
        /// </summary>
        public void AcceptAllChanges()
        {
            Context.AcceptAllChanges();
        }

		/// <summary>
        /// Dumps and refreshes the underlying context, abandoning any outstanding changes.
        /// </summary>
        public virtual void Refresh()
		{
			Context.Dispose();
		    Context = new <#=code.Escape(contextWrapperName)#>();
		    BindRepositories(Context);
		}
    }
}
<#
fileManager.StartNewFile(code.Escape(contextWrapperInterfaceName) + ".cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using System.Data.Entity;
using System.Data.Objects;

namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
    /// <summary>
    /// Wrapping interface for the <#=appName#> Entity Framework Context.
    /// </summary>
    public interface <#=code.Escape(contextWrapperInterfaceName)#> : IContextWrapper
    {
<#		
    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    	IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#> { get; }
<#
        }
#>
    }
}
<#
fileManager.StartNewFile(code.Escape(contextWrapperName) + ".cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using System.Data.Entity;
using System.Data.Objects;
using <#=code.EscapeNamespace(namespaceName)#>.Abstract;

namespace <#=code.EscapeNamespace(namespaceName)#>
{
    /// <summary>
    /// Wraps the <#=appName#> Entity Framework Context.
    /// </summary>
    public class <#=code.Escape(contextWrapperName)#> : ContextWrapperBase<<#=code.Escape(container.Name)#>>, <#=code.Escape(contextWrapperInterfaceName)#>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#=code.Escape(contextWrapperName)#>"/> class.
        /// </summary>
        public <#=code.Escape(contextWrapperName)#>()
        {
            Context = new <#=code.Escape(container.Name)#>();
        }
		
<#		
    foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
    {
#>
    	/// <summary>
        /// Gets the <#=code.Escape(entitySet)#> entities.
        /// </summary>
        public IDbSet<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet)#> { get { return Context.<#=code.Escape(entitySet)#>; } }
		
<#
    }
#>
    }
}
<#
fileManager.StartNewFile("ContextWrapperBase.cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.Entity.Infrastructure;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq.Expressions;
using System.Runtime;

namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
    /// <summary>
    /// Wraps the context object.
    /// </summary>
    public abstract class ContextWrapperBase<TContext> : IContextWrapper where TContext : IObjectContextAdapter
    {
        protected TContext Context { get; set; }

        /// <summary>
        /// Accepts all changes.
        /// </summary>
        public void AcceptAllChanges()
        {
            Context.ObjectContext.AcceptAllChanges();
        }

        /// <summary>
        /// Adds the object.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        public void AddObject(string entitySetName, object entity)
        {
            Context.ObjectContext.AddObject(entitySetName, entity);
        }

        /// <summary>
        /// Applies the current values.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="currentEntity">The current entity.</param>
        /// <returns></returns>
        public TEntity ApplyCurrentValues<TEntity>(string entitySetName, TEntity currentEntity) where TEntity : class
        {
            return Context.ObjectContext.ApplyCurrentValues(entitySetName, currentEntity);
        }

        /// <summary>
        /// Applies the original values.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="originalEntity">The original entity.</param>
        /// <returns></returns>
        public TEntity ApplyOriginalValues<TEntity>(string entitySetName, TEntity originalEntity) where TEntity : class
        {
            return Context.ObjectContext.ApplyOriginalValues(entitySetName, originalEntity);
        }

        /// <summary>
        /// Attaches the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Attach(IEntityWithKey entity)
        {
            Context.ObjectContext.Attach(entity);
        }

        /// <summary>
        /// Attaches to.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        public void AttachTo(string entitySetName, object entity)
        {
            Context.ObjectContext.AttachTo(entitySetName, entity);
        }

        /// <summary>
        /// Changes the state of the object.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="state">The state.</param>
        public void ChangeObjectState<TEntity>(TEntity entity, EntityState state)
        {
            Context.ObjectContext.ObjectStateManager.ChangeObjectState(entity, state);
        }

        /// <summary>
        /// Creates the database.
        /// </summary>
        public void CreateDatabase()
        {
            Context.ObjectContext.CreateDatabase();
        }

        /// <summary>
        /// Creates the database script.
        /// </summary>
        /// <returns>The database as a script</returns>
        public string CreateDatabaseScript()
        {
            return Context.ObjectContext.CreateDatabaseScript();
        }

        /// <summary>
        /// Creates the entity key.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public EntityKey CreateEntityKey(string entitySetName, object entity)
        {
            return Context.ObjectContext.CreateEntityKey(entitySetName, entity);
        }

        /// <summary>
        /// Creates the object.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public T CreateObject<T>() where T : class
        {
            return Context.ObjectContext.CreateObject<T>();
        }

        /// <summary>
        /// Creates the object set.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <returns></returns>
        public ObjectSet<TEntity> CreateObjectSet<TEntity>() where TEntity : class
        {
            return Context.ObjectContext.CreateObjectSet<TEntity>();
        }

        /// <summary>
        /// Creates the object set.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <returns></returns>
        public ObjectSet<TEntity> CreateObjectSet<TEntity>(string entitySetName) where TEntity : class
        {
            return Context.ObjectContext.CreateObjectSet<TEntity>(entitySetName);
        }

        /// <summary>
        /// Creates the proxy types.
        /// </summary>
        /// <param name="types">The types.</param>
        public void CreateProxyTypes(IEnumerable<Type> types)
        {
            Context.ObjectContext.CreateProxyTypes(types);
        }

        /// <summary>
        /// Creates the query.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="queryString">The query string.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public ObjectQuery<T> CreateQuery<T>(string queryString, params ObjectParameter[] parameters)
        {
            return Context.ObjectContext.CreateQuery<T>(queryString, parameters);
        }

        /// <summary>
        /// Databases the exists.
        /// </summary>
        /// <returns></returns>
        public bool DatabaseExists()
        {
            return Context.ObjectContext.DatabaseExists();
        }

        /// <summary>
        /// Deletes the database.
        /// </summary>
        public void DeleteDatabase()
        {
            Context.ObjectContext.DeleteDatabase();
        }

        /// <summary>
        /// Deletes the object.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void DeleteObject(object entity)
        {
            Context.ObjectContext.DeleteObject(entity);
        }

        /// <summary>
        /// Detaches the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Detach(object entity)
        {
            Context.ObjectContext.Detach(entity);
        }

        /// <summary>
        /// Detects the changes.
        /// </summary>
        public void DetectChanges()
        {
            Context.ObjectContext.DetectChanges();
        }

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources
        /// </summary>
        public void Dispose()
        {
            Context.ObjectContext.Dispose();
        }

        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public int ExecuteFunction(string functionName, params ObjectParameter[] parameters)
        {
            return Context.ObjectContext.ExecuteFunction(functionName, parameters);
        }

        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        public ObjectResult<TElement> ExecuteFunction<TElement>(string functionName, params ObjectParameter[] parameters)
        {
            return Context.ObjectContext.ExecuteFunction<TElement>(functionName, parameters);
        }

        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public ObjectResult<TElement> ExecuteFunction<TElement>(string functionName, MergeOption mergeOption, params ObjectParameter[] parameters)
        {
            return Context.ObjectContext.ExecuteFunction<TElement>(functionName, mergeOption, parameters);
        }

        /// <summary>
        /// Executes the store command.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public int ExecuteStoreCommand(string commandText, params object[] parameters)
        {
            return Context.ObjectContext.ExecuteStoreCommand(commandText, parameters);
        }

        /// <summary>
        /// Executes the store query.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="commandText">The command text.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        public ObjectResult<TElement> ExecuteStoreQuery<TElement>(string commandText, params object[] parameters)
        {
            return Context.ObjectContext.ExecuteStoreQuery<TElement>(commandText, parameters);
        }

        /// <summary>
        /// Executes the store query.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="commandText">The command text.</param>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        public ObjectResult<TEntity> ExecuteStoreQuery<TEntity>(string commandText, string entitySetName, MergeOption mergeOption, params object[] parameters)
        {
            return Context.ObjectContext.ExecuteStoreQuery<TEntity>(commandText, entitySetName, mergeOption, parameters);
        }

        /// <summary>
        /// Gets the object by key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns></returns>
        public object GetObjectByKey(EntityKey key)
        {
            return Context.ObjectContext.GetObjectByKey(key);
        }

        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <param name="navigationProperty">The navigation property.</param>
        public void LoadProperty(object entity, string navigationProperty)
        {
            Context.ObjectContext.LoadProperty(entity, navigationProperty);
        }

        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="selector">The selector.</param>
        public void LoadProperty<TEntity>(TEntity entity, Expression<Func<TEntity, object>> selector)
        {
            Context.ObjectContext.LoadProperty(entity, selector);
        }

        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <param name="navigationProperty">The navigation property.</param>
        /// <param name="mergeOption">The merge option.</param>
        public void LoadProperty(object entity, string navigationProperty, MergeOption mergeOption)
        {
            Context.ObjectContext.LoadProperty(entity, navigationProperty, mergeOption);
        }

        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="selector">The selector.</param>
        /// <param name="mergeOption">The merge option.</param>
        public void LoadProperty<TEntity>(TEntity entity, Expression<Func<TEntity, object>> selector, MergeOption mergeOption)
        {
            Context.ObjectContext.LoadProperty(entity, selector, mergeOption);
        }

        /// <summary>
        /// Refreshes the specified refresh mode.
        /// </summary>
        /// <param name="refreshMode">The refresh mode.</param>
        /// <param name="collection">The collection.</param>
        public void Refresh(RefreshMode refreshMode, IEnumerable collection)
        {
            Context.ObjectContext.Refresh(refreshMode, collection);
        }

        /// <summary>
        /// Refreshes the specified refresh mode.
        /// </summary>
        /// <param name="refreshMode">The refresh mode.</param>
        /// <param name="entity">The entity.</param>
        public void Refresh(RefreshMode refreshMode, object entity)
        {
            Context.ObjectContext.Refresh(refreshMode, entity);
        }

        /// <summary>
        /// Saves the changes.
        /// </summary>
        /// <returns></returns>
        [TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]
        public int SaveChanges()
        {
            return Context.ObjectContext.SaveChanges();
        }

        /// <summary>
        /// Saves the changes.
        /// </summary>
        /// <param name="options">The options.</param>
        /// <returns></returns>
        public int SaveChanges(SaveOptions options)
        {
            return Context.ObjectContext.SaveChanges(options);
        }

        /// <summary>
        /// Translates the specified reader.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="reader">The reader.</param>
        /// <returns></returns>
        public ObjectResult<TElement> Translate<TElement>(DbDataReader reader)
        {
            return Context.ObjectContext.Translate<TElement>(reader);
        }

        /// <summary>
        /// Translates the specified reader.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="reader">The reader.</param>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <returns></returns>
        public ObjectResult<TEntity> Translate<TEntity>(DbDataReader reader, string entitySetName, MergeOption mergeOption)
        {
            return Context.ObjectContext.Translate<TEntity>(reader, entitySetName, mergeOption);
        }

        /// <summary>
        /// Tries the get object by key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public bool TryGetObjectByKey(EntityKey key, out object value)
        {
            return Context.ObjectContext.TryGetObjectByKey(key, out value);
        }
    }
}
<#
fileManager.StartNewFile("IContextWrapper.cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq.Expressions;

namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
    /// <summary>
    /// Wrapping interface for the Entity Framework Context
    /// </summary>
    public interface IContextWrapper
    {
        /// <summary>
        /// Accepts all changes.
        /// </summary>
        void AcceptAllChanges();

        /// <summary>
        /// Adds the object.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        void AddObject(string entitySetName, object entity);

        /// <summary>
        /// Applies the current values.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="currentEntity">The current entity.</param>
        /// <returns></returns>
        TEntity ApplyCurrentValues<TEntity>(string entitySetName, TEntity currentEntity) where TEntity : class;

        /// <summary>
        /// Applies the original values.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="originalEntity">The original entity.</param>
        /// <returns></returns>
        TEntity ApplyOriginalValues<TEntity>(string entitySetName, TEntity originalEntity) where TEntity : class;

        /// <summary>
        /// Attaches the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void Attach(IEntityWithKey entity);

        /// <summary>
        /// Attaches to.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        void AttachTo(string entitySetName, object entity);

        /// <summary>
        /// Changes the state of the object.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="state">The state.</param>
        void ChangeObjectState<TEntity>(TEntity entity, EntityState state);

        /// <summary>
        /// Creates the database.
        /// </summary>
        void CreateDatabase();

        /// <summary>
        /// Creates the database script.
        /// </summary>
        /// <returns></returns>
        string CreateDatabaseScript();

        /// <summary>
        /// Creates the entity key.
        /// </summary>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        EntityKey CreateEntityKey(string entitySetName, object entity);

        /// <summary>
        /// Creates the object.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        T CreateObject<T>() where T : class;

        /// <summary>
        /// Creates the object set.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <returns></returns>
        ObjectSet<TEntity> CreateObjectSet<TEntity>() where TEntity : class;
        /// <summary>
        /// Creates the object set.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <returns></returns>
        ObjectSet<TEntity> CreateObjectSet<TEntity>(string entitySetName) where TEntity : class;

        /// <summary>
        /// Creates the proxy types.
        /// </summary>
        /// <param name="types">The types.</param>
        void CreateProxyTypes(IEnumerable<Type> types);

        /// <summary>
        /// Creates the query.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="queryString">The query string.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectQuery<T> CreateQuery<T>(string queryString, params ObjectParameter[] parameters);

        /// <summary>
        /// Databases the exists.
        /// </summary>
        /// <returns></returns>
        bool DatabaseExists();

        /// <summary>
        /// Deletes the database.
        /// </summary>
        void DeleteDatabase();

        /// <summary>
        /// Deletes the object.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void DeleteObject(object entity);

        /// <summary>
        /// Detaches the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void Detach(object entity);

        /// <summary>
        /// Detects the changes.
        /// </summary>
        void DetectChanges();

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources
        /// </summary>
        void Dispose();

        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        int ExecuteFunction(string functionName, params ObjectParameter[] parameters);

        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectResult<TElement> ExecuteFunction<TElement>(string functionName, params ObjectParameter[] parameters);
        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="functionName">Name of the function.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectResult<TElement> ExecuteFunction<TElement>(string functionName, MergeOption mergeOption, params ObjectParameter[] parameters);

        /// <summary>
        /// Executes the store command.
        /// </summary>
        /// <param name="commandText">The command text.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        int ExecuteStoreCommand(string commandText, params object[] parameters);

        /// <summary>
        /// Executes the store query.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="commandText">The command text.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectResult<TElement> ExecuteStoreQuery<TElement>(string commandText, params object[] parameters);
        /// <summary>
        /// Executes the store query.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="commandText">The command text.</param>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <param name="parameters">The parameters.</param>
        /// <returns></returns>
        ObjectResult<TEntity> ExecuteStoreQuery<TEntity>(string commandText, string entitySetName, MergeOption mergeOption, params object[] parameters);

        /// <summary>
        /// Gets the object by key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <returns></returns>
        object GetObjectByKey(EntityKey key);

        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <param name="navigationProperty">The navigation property.</param>
        void LoadProperty(object entity, string navigationProperty);
        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="selector">The selector.</param>
        void LoadProperty<TEntity>(TEntity entity, Expression<Func<TEntity, object>> selector);
        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <param name="navigationProperty">The navigation property.</param>
        /// <param name="mergeOption">The merge option.</param>
        void LoadProperty(object entity, string navigationProperty, MergeOption mergeOption);
        /// <summary>
        /// Loads the property.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="entity">The entity.</param>
        /// <param name="selector">The selector.</param>
        /// <param name="mergeOption">The merge option.</param>
        void LoadProperty<TEntity>(TEntity entity, Expression<Func<TEntity, object>> selector, MergeOption mergeOption);

        /// <summary>
        /// Refreshes the specified refresh mode.
        /// </summary>
        /// <param name="refreshMode">The refresh mode.</param>
        /// <param name="collection">The collection.</param>
        void Refresh(RefreshMode refreshMode, IEnumerable collection);
        /// <summary>
        /// Refreshes the specified refresh mode.
        /// </summary>
        /// <param name="refreshMode">The refresh mode.</param>
        /// <param name="entity">The entity.</param>
        void Refresh(RefreshMode refreshMode, object entity);

        /// <summary>
        /// Saves the changes.
        /// </summary>
        /// <returns></returns>
        int SaveChanges();
        /// <summary>
        /// Saves the changes.
        /// </summary>
        /// <param name="options">The options.</param>
        /// <returns></returns>
        int SaveChanges(SaveOptions options);

        /// <summary>
        /// Translates the specified reader.
        /// </summary>
        /// <typeparam name="TElement">The type of the element.</typeparam>
        /// <param name="reader">The reader.</param>
        /// <returns></returns>
        ObjectResult<TElement> Translate<TElement>(DbDataReader reader);
        /// <summary>
        /// Translates the specified reader.
        /// </summary>
        /// <typeparam name="TEntity">The type of the entity.</typeparam>
        /// <param name="reader">The reader.</param>
        /// <param name="entitySetName">Name of the entity set.</param>
        /// <param name="mergeOption">The merge option.</param>
        /// <returns></returns>
        ObjectResult<TEntity> Translate<TEntity>(DbDataReader reader, string entitySetName, MergeOption mergeOption);

        /// <summary>
        /// Tries the get object by key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        bool TryGetObjectByKey(EntityKey key, out object value);
    }
}
<#WriteAutogeneratedCodeNotice();#><#
fileManager.StartNewFile("IRepository.cs");
#>
namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
    /// <summary>
    /// Generic Repository
    /// </summary>
    /// <typeparam name="TEntity">The entity type to return</typeparam>
    /// <typeparam name="TEntityId">The type of the id.</typeparam>
    public interface IRepository<TEntity, TEntityId> : IReadOnlyRepository<TEntity, TEntityId> where TEntity : class
    {
        /// <summary>
        /// Adds the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void Add(TEntity entity);

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void Delete(TEntity entity);

        /// <summary>
        /// Edits the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        void Edit(TEntity entity);
    }
}
<#WriteAutogeneratedCodeNotice();#><#
fileManager.StartNewFile("IReadOnlyRepository.cs");
#>
using System;
using System.Linq;

namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
    /// <summary>
    /// Generic Read Only Repository
    /// </summary>
    /// <typeparam name="TEntity">The entity type to return</typeparam>
    /// <typeparam name="TEntityId">The type of the id.</typeparam>
    public interface IReadOnlyRepository<out TEntity, in TEntityId> : IDisposable where TEntity : class
    {
        /// <summary>
        /// Gets all of the items.
        /// </summary>
        /// <returns>All of the items.</returns>
        IQueryable<TEntity> All();

        /// <summary>
        /// Gets the item by id.
        /// </summary>
        /// <param name="id">The id of the item.</param>
        /// <returns>The item.</returns>
        TEntity By<#=code.Escape(idFieldName)#>(TEntityId id);
    }
}
<#
fileManager.StartNewFile("RepositoryBase.cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using System.Data;
using System.Data.Entity;
using System.Linq;

namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
    /// <summary>
    /// Base Repository
    /// </summary>
    /// <typeparam name="TContext">The type of the context.</typeparam>
    /// <typeparam name="TEntity">The type of the entity.</typeparam>
    /// <typeparam name="TEntityBase">The type of the entity base.</typeparam>
    /// <typeparam name="TEntityId">The type of the entity id.</typeparam>
    public abstract class RepositoryBase<TContext, TEntity, TEntityBase, TEntityId> : IRepository<TEntity, TEntityId>
        where TEntityBase : class
        where TEntity : class, TEntityBase
        where TContext : IContextWrapper
    {
        /// <summary>
        /// When called from a child, initializes a new instance of the repository class.
        /// </summary>
        /// <param name="contextWrapper">The context wrapper.</param>
        protected RepositoryBase(TContext contextWrapper)
        {
            Context = contextWrapper;
        }

        /// <summary>
        /// Gets or sets the context.
        /// </summary>
        /// <value>
        /// The context.
        /// </value>
        protected TContext Context { get; set; }

        /// <summary>
        /// Gets the entity set.
        /// </summary>
        protected abstract IDbSet<TEntityBase> EntitySet { get; }

        /// <summary>
        /// Gets the entity set.
        /// </summary>
        protected abstract IQueryable<TEntity> QuerySet { get; }

        /// <summary>
        /// Gets all the relationship types.
        /// </summary>
        /// <returns>Relationship Types</returns>
        public IQueryable<TEntity> All()
        {
            var query = QuerySet;
            return query;
        }

        /// <summary>
        /// Gets the relationship types by id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns>Relationship Types</returns>
        public abstract TEntity By<#=code.Escape(idFieldName)#>(TEntityId id);

        /// <summary>
        /// Adds the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Add(TEntity entity)
        {
            EntitySet.Add(entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Delete(TEntity entity)
        {
            EntitySet.Remove(entity);
        }

        /// <summary>
        /// Edits the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        public void Edit(TEntity entity)
        {
            Context.ChangeObjectState(entity, EntityState.Modified);
        }

        /// <summary>
        /// Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public virtual void Dispose()
        {
            
        }
    }
}
<#
fileManager.StartNewFile("IEntityRepositories.cs");
#>
<#WriteAutogeneratedCodeNotice();#>
namespace <#=code.EscapeNamespace(namespaceName)#>.Abstract
{
<#
// Emit Partial Repository Interfaces
foreach (EntityType entity in ItemCollection.GetItems<EntityType>())
{
	var repoIntName = "I" + PluraliseEntity(entity) + "Repository";
	var primaryKeyType = entity.KeyMembers[0].TypeUsage;	
#>
	/// <summary>
	/// Interface to provide access to the <#=PluraliseEntity(entity)#> from the data source.
	/// </summary>
	public partial interface <#=code.Escape(repoIntName)#> : IRepository<<#=code.Escape(entity)#>, <#=code.Escape(primaryKeyType)#>>
	{	}

<#
}
#>	
}
<#

// Emit Partial Sql Repositories for entities with defined entity sets
foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
{
	var entity = entitySet.ElementType;
	var repoName = PluraliseEntity(entity) + "Repository";
	var repoIntName = "I" + repoName;
	var primaryKeyType = entity.KeyMembers[0].TypeUsage;	
	fileManager.StartNewFile(repoName + ".cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using System;
using System.Data.Entity;
using System.Data.Objects;
using System.Linq;
using <#=code.EscapeNamespace(namespaceName)#>.Abstract;

namespace <#=code.EscapeNamespace(namespaceName)#>.Repositories
{
	/// <summary>
	/// Provides access to the <#=PluraliseEntity(entity)#> from the data source.
	/// </summary>
	public partial class <#=code.Escape(repoName)#> : RepositoryBase<<#=code.Escape(contextWrapperInterfaceName)#>, <#=code.Escape(entity)#>, <#=code.Escape(entity)#>, <#=code.Escape(primaryKeyType)#>>, <#=code.Escape(repoIntName)#>
	{
        /// <summary>
        /// Initializes a new instance of the <see cref="<#=PluraliseEntity(entity)#>Repository"/> class.
        /// </summary>
        /// <param name="contextWrapper">The context wrapper.</param>
        public <#=code.Escape(repoName)#>(<#=code.Escape(contextWrapperInterfaceName)#> contextWrapper)
            : base(contextWrapper)
        { }
		
        /// <summary>
        /// Gets the entity set.
        /// </summary>
        protected override IDbSet<<#=entity.Name#>> EntitySet
        {
            get { return Context.<#=PluraliseEntity(entity)#>; }
        }
		
        /// <summary>
        /// Gets the set of data to query against.
        /// </summary>
        protected override IQueryable<<#=entity.Name#>> QuerySet
        {
            get { return EntitySet; }
        }

        /// <summary>
        /// Gets the <#=code.Escape(entity)#> by id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns><#=code.Escape(entity)#></returns>
        public override <#=code.Escape(entity)#> By<#=code.Escape(idFieldName)#>(<#=code.Escape(primaryKeyType)#> id)
        {
            var query = QuerySet.FirstOrDefault(x => x.<#=code.Escape(idFieldName)#> == id);
            return query;
        }
	}
}
<#
}
#>
<#

// Emit Partial Sql Repositories for entities without defined entity sets
foreach (EntityType entity in entitiesWithoutSets)
{
	var repoName = PluraliseEntity(entity) + "Repository";
	var repoIntName = "I" + repoName;
	var primaryKeyType = entity.KeyMembers[0].TypeUsage;	
	fileManager.StartNewFile(repoName + ".cs");
#>
<#WriteAutogeneratedCodeNotice();#>
using System;
using System.Data.Entity;
using System.Data.Objects;
using System.Linq;
using <#=code.EscapeNamespace(namespaceName)#>.Abstract;

namespace <#=code.EscapeNamespace(namespaceName)#>.Repositories
{
	/// <summary>
	/// Provides access to the <#=PluraliseEntity(entity)#> from the data source.
	/// </summary>
	public partial class <#=code.Escape(repoName)#> : RepositoryBase<<#=code.Escape(contextWrapperInterfaceName)#>, <#=code.Escape(entity)#>, <#=code.Escape(entity.BaseType)#>, <#=code.Escape(primaryKeyType)#>>, <#=code.Escape(repoIntName)#>
	{
        /// <summary>
        /// Initializes a new instance of the <see cref="<#=PluraliseEntity(entity)#>Repository"/> class.
        /// </summary>
        /// <param name="contextWrapper">The context wrapper.</param>
        public <#=code.Escape(repoName)#>(<#=code.Escape(contextWrapperInterfaceName)#> contextWrapper)
            : base(contextWrapper)
        { }
		
        /// <summary>
        /// Gets the entity set.
        /// </summary>
        protected override IDbSet<<#=entity.BaseType.Name#>> EntitySet
        {
            get { return Context.<#=PluraliseEntity(entity.BaseType)#>; }
        }
		
        /// <summary>
        /// Gets the set of data to query against.
        /// </summary>
        protected override IQueryable<<#=entity.Name#>> QuerySet
        {
            get { return EntitySet.OfType<<#=entity.Name#>>(); }
        }

        /// <summary>
        /// Gets the <#=code.Escape(entity)#> by id.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns><#=code.Escape(entity)#></returns>
        public override <#=code.Escape(entity)#> By<#=code.Escape(idFieldName)#>(<#=code.Escape(primaryKeyType)#> id)
        {
            var query = QuerySet.FirstOrDefault(x => x.<#=code.Escape(idFieldName)#> == id);
            return query;
        }
	}
}
<#
}
#>
<#
fileManager.Process();
#>
<#+
private void WriteAutogeneratedCodeNotice()
{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#+
}
#>
<#+
private string PluraliseEntity(EdmType entity)
{
	CodeGenerationTools code = new CodeGenerationTools(this);
	var entityName = code.Escape(entity.Name);
	if (entityName.EndsWith("Person"))
	{
		return entityName.Replace("Person", "People");
	}
	if (entityName.EndsWith("Entry"))
	{
		return entityName.Replace("Entry", "");
	}
	if (entityName.EndsWith("Info"))
	{
		return entityName.Replace("Info", "InfoEntries");
	}
	if (entityName.EndsWith("Day"))
	{
		return entityName.Replace("Day", "Days");
	}
	if (entityName.EndsWith("s"))
    {
		return entityName + "es";
    }
	if (entityName.EndsWith("y"))
    {
		return entityName.Substring(0, entityName.Length - 1) + "ies";
    }

	return entityName + "s";
}
#>